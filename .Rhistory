shiny::runApp()
runApp()
runApp()
library(odbc)
library(zoo)
library(xlsx)
library(tidyr)
library(dplyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(bslib)
library(leaflet)
library(plotly)
library(rpivotTable)
library(forecast)
library(arules)
library(arulesViz)
library(recommenderlab)
library(DT)
library(corrplot)
fecha_actual <- Sys.Date()
# Cargar datos de fuentes externas (archivos excel)
# Historico ventas de cemento desde ISTAC
ISTAC_cemento <-   read.xlsx2("ISTAC_cemento.xlsx", sheetName = "Sheet0", startRow = 6 , colIndex = c(1,2,7,12,17,22,27,32,37), stringsAsFactors=FALSE)
# Corregimos el título de las columnas y las fechas de la primera columna
colnames(ISTAC_cemento) <- c("Fecha", sub("\\ES.*", "", gsub('[.]', '', colnames(ISTAC_cemento)))[2:ncol(ISTAC_cemento)])
ISTAC_cemento <- ISTAC_cemento[c(2:nrow(ISTAC_cemento)),]
colnames(ISTAC_cemento) <- c("Fecha", sub("\\ES.*", "", gsub('[.]', '', colnames(ISTAC_cemento)))[2:ncol(ISTAC_cemento)])
ISTAC_cemento[,1] <- sub(".*\\(", "", gsub('[M)]', '', ISTAC_cemento[,1])) #nos quedamos con el string referente a la fecha
ISTAC_cemento <- subset(ISTAC_cemento, nchar(ISTAC_cemento$Fecha)>4, select = colnames(ISTAC_cemento[, !names(ISTAC_cemento) %in% c("Canarias")])) #se eliminan las filas con el total por año
ISTAC_cemento[,2:ncol(ISTAC_cemento)] <- as.double(unlist(ISTAC_cemento[,2:ncol(ISTAC_cemento)])) #convertimos datos numéricos
ISTAC_cemento <- na.omit(ISTAC_cemento)
# Serie histórica de ventas de los últimos 12 años
Historico_ventas <- read.xlsx2("seriehistorica_ventas.xlsx", sheetName = "Hoja1", colClasses = c("numeric", "numeric", "numeric", "numeric"))
Historico_agrupado <- aggregate(VENTAS ~ AÑO + MES, data = Historico_ventas, sum)
Historico_agrupado <- Historico_agrupado[order(Historico_agrupado$AÑO, Historico_agrupado$MES), ]
# Definir los parámetros de la conexión y establecer la conexión
server <- "LAPTOP-KU29CVSF\\SQLEXPRESS"
database <- "TFM"
con <- dbConnect(odbc(), driver = "SQL Server",  server = server, database = database, trusted_connection = "yes")
# CARGA DE DATOS #
# Realizamos las consultas a la base de datos para cargar las dimensiones y hechos
DimSubfamilia <- dbGetQuery(con, "SELECT SubfamiliaID, Descripcion FROM dbo.Subfamilia")
DimFamilia <- dbGetQuery(con, "SELECT FamiliaID, Descripcion FROM dbo.Familia")
DimActividad <- dbGetQuery(con, "SELECT ActividadID, Descripcion FROM dbo.Actividad")
DimSucursal <- dbGetQuery(con, "SELECT SucursalID, Nombre, Latitud, Longitud FROM dbo.Sucursal")
DimTiempo <- dbGetQuery(con, "SELECT Fecha, Año, Mes, Nombre_mes, Dia, Dia_semana, Semana, Trimestre, Temporada, Dia_laborable FROM dbo.Tiempo")
DimArticulo <- dbGetQuery(con, "SELECT Codigo, Nombre, FamiliaID, SubfamiliaID, Genera_retal, Formato, Tipo_impositivo, AIEM, Num_medidas, Largo, Ancho, Coeficiente, Peso_bruto, Peso_neto, Categoria, Peso_unidad FROM dbo.Articulo")
DimPersonal <- dbGetQuery(con, "SELECT E.EmpleadoID, Fecha_nacimiento, Genero, Nivel_estudios, Puesto, Departamento, Tipo_contrato, Jornada, Salario, Fecha_contratacion FROM dbo.Empleado E inner join dbo.Contratacion as C on E.EmpleadoID = C.EmpleadoID")
DimCliente <- dbGetQuery(con, "SELECT ClienteID, Nombre, Fecha_creacion, Forma_juridica, Cod_postal, Provincia, Pais, Tipo_cliente, Ultima_compra, Descuento, RepresentanteID, Credito_activo, ActividadID, Bloqueado, Tarifa, Tarifas_especiales, Total_autorizado, Riesgo_asegurado, Riesgo, Canal_cobro,
CASE WHEN CHARINDEX(' ', forma_pago) > 0 THEN SUBSTRING(forma_pago, 1, CHARINDEX(' ', forma_pago) - 1) ELSE forma_pago END AS Metodo_pago,
CASE WHEN PATINDEX('%[0-9]%', forma_pago) > 0 THEN SUBSTRING(forma_pago, PATINDEX('%[0-9]%', forma_pago), CHARINDEX(' ', forma_pago + ' ', PATINDEX('%[0-9]%', forma_pago)) - PATINDEX('%[0-9]%', forma_pago)) ELSE '0'
END AS Dias_pago, Latitud, Longitud FROM dbo.Cliente where (clienteid not between '90000' and '90007') and fecha_creacion < '2023-01-01'")
FactVentas <- dbGetQuery(con, "SELECT FacturaID, SucursalID, Isla, ClienteID, Tipo_documento, Num_factura, Fecha_factura, Hora_factura, ArticuloID, Unidades_articulo, V.Precio_venta, V.Precio_coste, V.Precio_liquido, Descuento, Clase_articulo, Tarifa, VendedorID, Impuesto, Desviacion, Causa_FR,
Unidades_articulo * V.Precio_liquido as Importe_linea, Unidades_articulo * V.Precio_coste as Coste_linea, Unidades_articulo * A.Peso_unidad as Peso_linea, (Unidades_articulo * V.Precio_liquido) - (Unidades_articulo * V.Precio_coste) as Margen_bruto
FROM dbo.Ventas V left join dbo.Articulo A on codigo = articuloid")
write.xlsx2(DimActividad, "DimActividad.xlsx")
library(readxl)
write.xlsx2(DimActividad, "DimActividad.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
pru <- read.xlsx2("DimActividad.xlsx", sheetName = "Hoja1")
pru <- read.xlsx2("DimActividad.xlsx", sheetName = "Sheet1")
write.xlsx2(DimFamilia, "DimFamilia.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
write.xlsx2(DimSubfamilia, "DimSubfamilia.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
write.xlsx2(DimSucursal, "DimSucursal.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
pru <- read.xlsx2("DimSucursal.xlsx", sheetName = "Sheet1")
pru <- read.xlsx2("DimSucursal.xlsx", sheetName = "Sheet1", colClasses = c("character", "character", "numeric", "numeric"))
write.xlsx2(DimPersonal, "DimPersonal.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
write.xlsx2(DimTiempo, "DimTiempo.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
pru <- read.xlsx2("DimPersonal.xlsx", sheetName = "Sheet1")
pru$Fecha_nacimiento <- as.Date(DimPersonal$Fecha_nacimiento)
pru$Fecha_contratacion <- as.Date(DimPersonal$Fecha_contratacion)
test <- read.xlsx2("DimPersonal.xlsx", sheetName = "Sheet1",  colClasses = c("character", "date", "character", "character","character","character","character","character", "numeric", "date") )
test <- read.xlsx2("DimPersonal.xlsx", sheetName = "Sheet1",  colClasses = c("character", "character", "character", "character","character","character","character","character", "numeric", "character") )
test$Fecha_nacimiento <- as.Date(DimPersonal$Fecha_nacimiento)
test$Fecha_contratacion <- as.Date(DimPersonal$Fecha_contratacion)
test <- read.xlsx2("DimTiempo.xlsx", sheetName = "Sheet1",  colClasses = c("character", "numeric", "numeric", "character","numeric","character","numeric","numeric", "character", "logical") )
View(test)
read.xlsx2("DimArticulo.xlsx", sheetName = "Sheet1",  colClasses = c("character", "character", "character", "character", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric","numeric", "character", "numeric") )
write.xlsx2(DimArticulo, "DimArticulo.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
write.xlsx2(DimCliente, "DimCliente.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
write.xlsx2(FactVentas, "FactVentas.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
Fact1 <- subset(FactVentas, year(Fecha_factura) = 2021)
Fact1 <- subset(FactVentas, year(Fecha_factura) == 2021)
write.xlsx2(Fact1, "FactVentas1.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE )
install.packages("writexl")
memory.limit(size = 12000)
memory.size(max = FALSE)
write_xlsx(Fact1, "FactVentas1.xlsx", col.names = TRUE)
library(writexl)
write_xlsx(Fact1, "FactVentas1.xlsx", col.names = TRUE)
write_xlsx(Fact1, "FactVentas1.xlsx", col_names = TRUE)
write_xlsx(FactVentas, "FactVentas.xlsx", col_names = TRUE)
pruCliente <- read.xlsx2("DimCliente.xlsx", sheetName = "Sheet1",  colClasses = c("character", "character", "character", "character", "character", "character", "character", "character", "character", "numeric", "character", "logical", "character", "logical", "integer", "character", "numeric", "numeric", "numeric", "character", "character", "character", "numeric","numeric") )
pruFact <- read.xlsx2("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric") )
pruFact <- read.xlsx("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric") )
options(java.parameters = "-Xmx8000m")
pruFact <- read.xlsx("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric") )
options(java.parameters = "-Xmx12000m")
pruFact <- read.xlsx("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric") )
options(java.parameters = "-Xmx16000m")
pruFact <- read.xlsx("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric") )
# Aumenta la memoria asignada a 8 GB (8000 megabytes)
options(java.parameters = "-Xmx8000m") no funciona
library(readxl)
prufaccct <- read_xlsx(FactVentas.xlsx", sheetName = "Sheet1",  col_types = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric")   )
prufaccct <- read_xlsx("FactVentas.xlsx", sheetName = "Sheet1",  col_types = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric")   )
prufaccct <- read_xlsx("FactVentas.xlsx", sheet = "Sheet1",  col_types = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric")   )
prufaccct <- read_xls("FactVentas.xlsx", sheet = "Sheet1",  col_types = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric")   )
prufaccct <- read_xlsx("FactVentas.xlsx", sheet = "Sheet1",  col_types = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric")   )
options(java.parameters = "-Xmx12000m")
library(rJava)
library(xlsxjars)
library(xlsx)
pruFact <- read.xlsx2("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("integer64", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "integer", "character", "numeric","numeric", "character", "numeric", "numeric", "numeric", "numeric") )
shiny::runApp()
runApp()
gc()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
DimActividad <- read_excel("DimActividad.xlsx", sheet = "Sheet1")
DimFamilia <- read_excel("DimFamilia.xlsx", sheet = "Sheet1")
DimSubfamilia <- read_excel("DimSubfamilia.xlsx", sheet = "Sheet1")
DimSucursal <- read_excel("DimSucursal.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "numeric", "numeric"))
DimPersonal <- read_excel("DimPersonal.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "text", "text", "text", "text",
"text", "text", "numeric", "text"))
DimTiempo <- read_excel("DimTiempo.xlsx", sheet = "Sheet1",
col_types = c("text", "numeric", "numeric", "text", "numeric",
"text", "numeric", "numeric", "text", "logical"))
DimArticulo <- read_excel("DimArticulo.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "text", "text", "numeric",
"text", "text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "text", "numeric"))
DimCliente <- read_excel("DimCliente.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "text", "text", "text", "text",
"text", "text", "text", "numeric", "text", "logical",
"text", "logical", "numeric", "text", "numeric",
"numeric", "numeric", "text", "text", "text", "numeric",
"numeric"))
FactVentas <- read_excel("FactVentas.xlsx", sheet = "Sheet1",
col_types = c("text", "numeric", "text", "text", "text",
"numeric", "text", "text", "text", "numeric",
"numeric", "numeric", "numeric", "numeric",
"text", "text", "text", "numeric", "numeric",
"text", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"))
runApp()
gc()
library(xlsx)
library(zoo)
library(xlsx)
library(tidyr)
library(dplyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(bslib)
library(leaflet)
library(plotly)
library(rpivotTable)
library(forecast)
library(arules)
library(arulesViz)
library(recommenderlab)
library(DT)
library(corrplot)
fecha_actual <- Sys.Date()
# Cargar datos de fuentes externas (archivos excel)
# Historico ventas de cemento desde ISTAC
ISTAC_cemento <-   read.xlsx2("ISTAC_cemento.xlsx", sheetName = "Sheet0", startRow = 6 , colIndex = c(1,2,7,12,17,22,27,32,37), stringsAsFactors=FALSE)
# Corregimos el título de las columnas y las fechas de la primera columna
colnames(ISTAC_cemento) <- c("Fecha", sub("\\ES.*", "", gsub('[.]', '', colnames(ISTAC_cemento)))[2:ncol(ISTAC_cemento)])
ISTAC_cemento <- ISTAC_cemento[c(2:nrow(ISTAC_cemento)),]
colnames(ISTAC_cemento) <- c("Fecha", sub("\\ES.*", "", gsub('[.]', '', colnames(ISTAC_cemento)))[2:ncol(ISTAC_cemento)])
ISTAC_cemento[,1] <- sub(".*\\(", "", gsub('[M)]', '', ISTAC_cemento[,1])) #nos quedamos con el string referente a la fecha
ISTAC_cemento <- subset(ISTAC_cemento, nchar(ISTAC_cemento$Fecha)>4, select = colnames(ISTAC_cemento[, !names(ISTAC_cemento) %in% c("Canarias")])) #se eliminan las filas con el total por año
ISTAC_cemento[,2:ncol(ISTAC_cemento)] <- as.double(unlist(ISTAC_cemento[,2:ncol(ISTAC_cemento)])) #convertimos datos numéricos
ISTAC_cemento <- na.omit(ISTAC_cemento)
# Serie histórica de ventas de los últimos 12 años
Historico_ventas <- read.xlsx2("seriehistorica_ventas.xlsx", sheetName = "Hoja1", colClasses = c("numeric", "numeric", "numeric", "numeric"))
Historico_agrupado <- aggregate(VENTAS ~ AÑO + MES, data = Historico_ventas, sum)
Historico_agrupado <- Historico_agrupado[order(Historico_agrupado$AÑO, Historico_agrupado$MES), ]
# Definir los parámetros de la conexión y establecer la conexión
# server <- "LAPTOP-KU29CVSF\\SQLEXPRESS"
# database <- "TFM"
# con <- dbConnect(odbc(), driver = "SQL Server",  server = server, database = database, trusted_connection = "yes")
# CARGA DE DATOS #
# Realizamos las consultas a la base de datos para cargar las dimensiones y hechos
# DimSubfamilia <- dbGetQuery(con, "SELECT SubfamiliaID, Descripcion FROM dbo.Subfamilia")
# DimFamilia <- dbGetQuery(con, "SELECT FamiliaID, Descripcion FROM dbo.Familia")
# DimActividad <- dbGetQuery(con, "SELECT ActividadID, Descripcion FROM dbo.Actividad")
# DimSucursal <- dbGetQuery(con, "SELECT SucursalID, Nombre, Latitud, Longitud FROM dbo.Sucursal")
# DimTiempo <- dbGetQuery(con, "SELECT Fecha, Año, Mes, Nombre_mes, Dia, Dia_semana, Semana, Trimestre, Temporada, Dia_laborable FROM dbo.Tiempo")
# DimArticulo <- dbGetQuery(con, "SELECT Codigo, Nombre, FamiliaID, SubfamiliaID, Genera_retal, Formato, Tipo_impositivo, Num_medidas, Largo, Ancho, Coeficiente, Peso_bruto, Peso_neto, Categoria, Peso_unidad FROM dbo.Articulo")
# DimPersonal <- dbGetQuery(con, "SELECT E.EmpleadoID, Fecha_nacimiento, Genero, Nivel_estudios, Puesto, Departamento, Tipo_contrato, Jornada, Salario, Fecha_contratacion FROM dbo.Empleado E inner join dbo.Contratacion as C on E.EmpleadoID = C.EmpleadoID")
# DimCliente <- dbGetQuery(con, "SELECT ClienteID, Nombre, Fecha_creacion, Forma_juridica, Cod_postal, Provincia, Pais, Tipo_cliente, Ultima_compra, Descuento, RepresentanteID, Credito_activo, ActividadID, Bloqueado, Tarifa, Tarifas_especiales, Total_autorizado, Riesgo_asegurado, Riesgo, Canal_cobro,
#                               CASE WHEN CHARINDEX(' ', forma_pago) > 0 THEN SUBSTRING(forma_pago, 1, CHARINDEX(' ', forma_pago) - 1) ELSE forma_pago END AS Metodo_pago,
#                               CASE WHEN PATINDEX('%[0-9]%', forma_pago) > 0 THEN SUBSTRING(forma_pago, PATINDEX('%[0-9]%', forma_pago), CHARINDEX(' ', forma_pago + ' ', PATINDEX('%[0-9]%', forma_pago)) - PATINDEX('%[0-9]%', forma_pago)) ELSE '0'
#                               END AS Dias_pago, Latitud, Longitud FROM dbo.Cliente where (clienteid not between '90000' and '90007') and fecha_creacion < '2023-01-01'")
#
# FactVentas <- dbGetQuery(con, "SELECT FacturaID, SucursalID, Isla, ClienteID, Tipo_documento, Num_factura, Fecha_factura, Hora_factura, ArticuloID, Unidades_articulo, V.Precio_venta, V.Precio_coste, V.Precio_liquido, Descuento, Clase_articulo, Tarifa, VendedorID, Impuesto, Desviacion, Causa_FR,
# 	                             Unidades_articulo * V.Precio_liquido as Importe_linea, Unidades_articulo * V.Precio_coste as Coste_linea, Unidades_articulo * A.Peso_unidad as Peso_linea, (Unidades_articulo * V.Precio_liquido) - (Unidades_articulo * V.Precio_coste) as Margen_bruto
# 	                             FROM dbo.Ventas V left join dbo.Articulo A on codigo = articuloid")
#Se sustituye la conexión a base de datos local por ficheros excel para subirlo a la plataforma shinyapps
# DimActividad <- read.xlsx2("DimActividad.xlsx", sheetName = "Sheet1")
# DimFamilia <- read.xlsx2("DimFamilia.xlsx", sheetName = "Sheet1")
# DimSubfamilia <- read.xlsx2("DimSubfamilia.xlsx", sheetName = "Sheet1")
# DimSucursal <- read.xlsx2("DimSucursal.xlsx", sheetName = "Sheet1", colClasses = c("character", "character", "numeric", "numeric"))
# DimPersonal <- read.xlsx2("DimPersonal.xlsx", sheetName = "Sheet1",  colClasses = c("character", "character", "character", "character","character","character","character","character", "numeric", "character") )
# DimTiempo <- read.xlsx2("DimTiempo.xlsx", sheetName = "Sheet1",  colClasses = c("character", "numeric", "numeric", "character","numeric","character","numeric","numeric", "character", "logical") )
# DimArticulo <- read.xlsx2("DimArticulo.xlsx", sheetName = "Sheet1",  colClasses = c("character", "character", "character", "character", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric","numeric", "character", "numeric") )
# DimCliente <- read.xlsx2("DimCliente.xlsx", sheetName = "Sheet1",  colClasses = c("character", "character", "character", "character", "character", "character", "character", "character", "character", "numeric", "character", "logical", "character", "logical", "integer", "character", "numeric", "numeric", "numeric", "character", "character", "character", "numeric","numeric") )
# FactVentas <- read.xlsx2("FactVentas.xlsx", sheetName = "Sheet1",  colClasses = c("character", "integer", "character", "character", "character", "integer", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "integer", "character", "character", "character", "numeric", "numeric", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric") )
library(readxl)
DimActividad <- read_excel("DimActividad.xlsx", sheet = "Sheet1")
DimFamilia <- read_excel("DimFamilia.xlsx", sheet = "Sheet1")
DimSubfamilia <- read_excel("DimSubfamilia.xlsx", sheet = "Sheet1")
DimSucursal <- read_excel("DimSucursal.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "numeric", "numeric"))
DimPersonal <- read_excel("DimPersonal.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "text", "text", "text", "text",
"text", "text", "numeric", "text"))
DimTiempo <- read_excel("DimTiempo.xlsx", sheet = "Sheet1",
col_types = c("text", "numeric", "numeric", "text", "numeric",
"text", "numeric", "numeric", "text", "logical"))
DimArticulo <- read_excel("DimArticulo.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "text", "text", "numeric",
"text", "text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "text", "numeric"))
DimCliente <- read_excel("DimCliente.xlsx", sheet = "Sheet1",
col_types = c("text", "text", "text", "text", "text", "text",
"text", "text", "text", "numeric", "text", "logical",
"text", "logical", "numeric", "text", "numeric",
"numeric", "numeric", "text", "text", "text", "numeric",
"numeric"))
FactVentas <- read_excel("FactVentas.xlsx", sheet = "Sheet1",
col_types = c("text", "numeric", "text", "text", "text",
"numeric", "text", "text", "text", "numeric",
"numeric", "numeric", "numeric", "numeric",
"text", "text", "text", "numeric", "numeric",
"text", "numeric", "numeric", "numeric", "numeric"))
DimPersonal$Fecha_nacimiento <- as.Date(DimPersonal$Fecha_nacimiento)
DimPersonal$Fecha_contratacion <- as.Date(DimPersonal$Fecha_contratacion)
DimCliente$Fecha_creacion <- as.Date(DimCliente$Fecha_creacion)
DimCliente$Ultima_compra <- as.Date(DimCliente$Ultima_compra)
DimCliente$Dias_pago <- as.numeric(DimCliente$Dias_pago)
DimTiempo$Fecha <- as.Date(DimTiempo$Fecha)
FactVentas$Fecha_factura <- as.Date(FactVentas$Fecha_factura)
# Calcular la edad y la antigüedad para la dimensión Personal
DimPersonal$Edad <- floor(as.numeric(difftime(fecha_actual, DimPersonal$Fecha_nacimiento, units = "days")) / 365.25)
DimPersonal$Antiguedad <- floor(as.numeric(difftime(fecha_actual, DimPersonal$Fecha_contratacion, units = "days")) / 365.25)
# Calcular el margen sobre ventas y sobre coste en porcentaje
FactVentas$Margenven_percent <- 1- FactVentas$Coste_linea / FactVentas$Importe_linea
FactVentas$Margencos_percent <- (FactVentas$Importe_linea / FactVentas$Coste_linea) - 1
# Sumatorio de importe_linea por año y cliente
Ventas_cliente <- FactVentas %>%
group_by(ClienteID) %>%
summarise(Importe_ventas2021 = sum(Importe_linea[year(Fecha_factura) == 2021]),
Importe_ventas2022 = sum(Importe_linea[year(Fecha_factura) == 2022]))
# Sumatorio de Margen_bruto por año y cliente
Margen_cliente <- FactVentas %>%
group_by(ClienteID) %>%
summarise(Margen2021 = sum(Margen_bruto[year(Fecha_factura) == 2021]),
Margen2022 = sum(Margen_bruto[year(Fecha_factura) == 2022]))
Importemedio_cliente <- FactVentas %>%
filter(Tipo_documento == 'F') %>%
group_by(ClienteID) %>%
summarise(Importe_medio_cliente = mean(sum(Importe_linea) / n_distinct(FacturaID)))
# Calculo del numero de ventas y devoluciones por año 2021 y 2022 por cliente
Numventas_cliente <- FactVentas %>%
filter(Tipo_documento == 'F') %>%
mutate(Año = year(Fecha_factura)) %>%
group_by(ClienteID, Año) %>%
summarise(Numventas = n_distinct(FacturaID)) %>%
pivot_wider(names_from = Año, values_from = Numventas, names_prefix = "Numventas") %>%
replace_na(list(`Numventas2021` = 0, `Numventas2022` = 0))
Numdevoluciones_cliente <- FactVentas %>%
filter(Tipo_documento == 'FR') %>%
mutate(Año = year(Fecha_factura)) %>%
group_by(ClienteID, Año) %>%
summarise(Numdevoluciones = n_distinct(FacturaID)) %>%
pivot_wider(names_from = Año, values_from = Numdevoluciones, names_prefix = "Numdevoluciones") %>%
replace_na(list(`Numdevoluciones2021` = 0, `Numdevoluciones2022` = 0))
# Agregar las columnas al dataframe DimCliente y sustituir por 0 los valores NA's introducidos
DimCliente <- DimCliente %>%
left_join(Ventas_cliente, by = c("ClienteID" = "ClienteID")) %>%
left_join(Margen_cliente, by = c("ClienteID" = "ClienteID")) %>%
left_join(Numventas_cliente, by = "ClienteID") %>%
left_join(Numdevoluciones_cliente, by = "ClienteID") %>%
left_join(Importemedio_cliente, by = "ClienteID") %>%
mutate_at(vars(starts_with("Numventas")), ~coalesce(., 0)) %>%
mutate_at(vars(starts_with("Numdevoluciones")), ~coalesce(., 0)) %>%
mutate_at(vars(starts_with("Importe_")), ~coalesce(., 0)) %>%
mutate_at(vars(starts_with("Margen")), ~coalesce(., 0))
# Calculamos la columna Recencia (cuan recientemente nos compra el cliente)
DimCliente <- DimCliente %>%
mutate(Recencia = case_when(
Ultima_compra >= fecha_actual - months(4) ~ "Muy reciente",
Ultima_compra >= fecha_actual - months(11) ~ "Reciente",
Ultima_compra >= fecha_actual - months(20) ~ "Menos reciente",
Ultima_compra < fecha_actual - months(20) ~ "Antiguo",
is.na(Ultima_compra) ~ "Sin compras"
)
)
dfmapventas <- FactVentas %>%
group_by(ClienteID) %>%
summarise(Importe_ventas = round(sum(Importe_linea[year(Fecha_factura) == 2022]), 0) )
dfmapventas <- merge(subset(DimCliente, !is.na(Latitud), select=c(ClienteID, Latitud, Longitud)), dfmapventas, by = "ClienteID", all.x = TRUE)
dfmapventas <- dfmapventas[order(dfmapventas$Importe_ventas, decreasing = TRUE), ]
# Calculamos el objeto transacciones
dftransac <- subset(FactVentas, Tipo_documento == "F", select = c(FacturaID, ArticuloID))
dftransac$FacturaID <- as.factor(dftransac$FacturaID)
dftransac$ArticuloID <- as.factor(dftransac$ArticuloID)
dftransac <- dftransac %>%
group_by(FacturaID) %>%
summarize(ArticuloID = paste(ArticuloID, collapse = ",")) %>%
ungroup()
dftransac$FacturaID <- NULL
colnames(dftransac) <- c("Articulos")
lista_articulos <- strsplit(dftransac$Articulos, split = ",")
# Crear el objeto de transacciones y eliminar las variables auxiliares
transac <- as(lista_articulos, "transactions")
rm(dftransac)
rm(lista_articulos)
ven <- FactVentas[FactVentas$Tipo_documento == 'F' & year(FactVentas$Fecha_factura) == 2022, c("ClienteID", "ArticuloID")]
dfrecomendpop <- data.frame(Cliente = unique(ven$ClienteID))
dfrecomendpop <- dfrecomendpop %>% arrange(Cliente)
matriz_ventaspop <- ven %>% as("realRatingMatrix")
class(ven)
ven <- as.data.frame(FactVentas[FactVentas$Tipo_documento == 'F' & year(FactVentas$Fecha_factura) == 2022, c("ClienteID", "ArticuloID")] )
dfrecomendpop <- data.frame(Cliente = unique(ven$ClienteID))
dfrecomendpop <- dfrecomendpop %>% arrange(Cliente)
class(ven)
matriz_ventaspop <- ven %>% as("realRatingMatrix")
clibyact <- subset(DimCliente, substr(ActividadID, 1, 1) != "2", select = c(ClienteID))
venbyact <- ven[ven$ClienteID %in% clibyact$ClienteID, ]
dfrecomendubcf <- data.frame(Cliente = unique(venbyact$ClienteID))
dfrecomendubcf <- dfrecomendubcf %>% arrange(Cliente)
class(venbyact)
runApp()
